model<-gamlj::gamljMixed(
formula =y ~ 1 + cond+( 1|subj ),
data = subjects_by_stimuli,
plotHAxis = cond,
residPlot=T, randHist = T, clusterBoxplot = T
)
model
model<-gamlj::gamljMixed(
formula =y ~ 1 + cond+( 1|subj ),
data = subjects_by_stimuli,
plotHAxis = cond,
plotRandomEffects = T,
residPlot=T, randHist = T, clusterBoxplot = T
)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="clusterbasedcentered")))
data("beers_bars")
data<-beers_bars
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer + I(beer^2)+( 1 + beer + I(beer^2) | bar ),
data = data)
###### this has changed with lme4 1.1
testthat::test_that("some poly", {
testthat::expect_lt(model$main$anova$asDF[2,2],0.43)
testthat::expect_gt(model$main$anova$asDF[2,2],0.31)
})
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")))
testthat::test_that("standardizing", {
testthat::expect_equal(model$main$fixed$asDF[2,2],.8506,tolerance = .002)
})
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="clusterbasedstandardized")))
testthat::test_that("cluster-based-standardizing", {
testthat::expect_equal(model$main$fixed$asDF[2,2],.6111,tolerance = tol)
})
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="clusterbasedcentered")))
testthat::test_that("cluster-based-centering", {
testthat::expect_equal(model$main$fixed$asDF[2,2],.6070,tolerance = .002)
})
model<-gamlj::gamljMixed(
formula =smile ~ 1 +(1|bar),
data = data
)
testthat::test_that("intercept only works",
expect_equal(round(model$main$random$asDF[1,3],digits = 2),1.74)
)
data("subjects_by_stimuli")
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer")
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
installme("gamlj")
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
source("local/functions.R")
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
data$bar
levels(data$bar)
levels(data$bar)<-trimws(levels(data$bar))
levels(data$bar)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
testthat::test_that("standardizing", {
testthat::expect_equal(model$main$fixed$asDF[2,2],.8506,tolerance = .002)
})
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
data$bar
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
library(gamlj)
plotRandomEffects = T)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis="beer",
plotRandomEffects = T)
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis = "beer")
model
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis = "beer",
plotRandomEffects = T)
model
library(gamlj)
model<-gamlj::gamljMixed(
formula = smile ~ 1 + beer +( 1 + beer  | bar ),
data = data,
scaling = list(list(
var="beer",
type="standardized")),
plotHAxis = "beer",
plotRandomEffects = T)
model
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
library(gamlj)
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
library(gamlj)
a<-c(.333,-.667,.333)
var(a)
var(a*100)
var(a)
a*a
sum(a*a)
-1.376
-1.376*.66
-1.376*.33
-1.376/2
-1.376/3
-1.376/*.70
-1.376*.70
-1.376*.7045
a<-c(.333,-.667,.333)
sum(a*a)
.665/1.40
a/.5
a/.704
a/.704*2
.70475^2
.70475^3
sqrt(.70475)
a*a
sum(a*a)
a<-c(.333,-.667,.333)
sum(a*a)
a/sum(a*a)
3*a/sum(a*a)
2*a/sum(a*a)
a/sum(a*a)
a/sum(a*a)
a/sqrt(sum(a*a))
aa<-rep(c,each=100)
aa<-rep(a,each=100)
sd(aa)
aa<-rep(a,each=100)
sd(aa)
aa<-rep(a,each=1000)
sd(aa)
a*a
sum(a*a)
a*1000
a*a*1000
sum(a*a*1000)
sum(a*a*1000)/999
aa<-rep(a,each=1000)
var(aa)
sum(a*a*1000)/999
aa<-rep(a,each=10)
aa
a*a
a*a*1000
aa<-rep(a,each=1000)
var(aa)
a*a*1000
sum(a*a*1000)
sum(a*a*1000)/3
sum(a*a*1000)/(3*999)
sum(a*a*1000)/(3*1000)
var(aa)
sum(a*a*999)/(3*1000)
mean(aa)
sum(a*a*1000)/(3*1000)
sum(a*a)/(3)
sum(a*a)/(3)
vv<-var(aa)
-1.376*vv
-1.376*vv*2
vv
-1.376/sqrt(vv)
-1.376*sqrt(vv)
-1.153*sqrt(vv)
sum(a*a)/(3)
a/vv
vv<-sd(aa)
a/vv
vv<-sd(aa)
a/vv
-1.376*vv
-1.153*vv
a/vv
vv<-sd(aa)
a/vv
-1.376*vv
-1.153*vv
m1-m2
m1<--1
m2<-1
m1-m2
sqrt(.666)
.666^2
b<-c(-.5,.5)
bb<-rep(b,each=1000)
var(bb)
b<-c(-.5,.5)
bb<-rep(b,each=1000)
var(bb)
b<-c(-.5,.5)
bb<-rep(b,each=1000)
var(bb)
b<-c(-1,1)
bb<-rep(b,each=1000)
var(bb)
a<-c(-1,0,1)
sum(a*a)/(3)
a<-c(-1,0,1)
sum(a*a)/(3)
aa<-rep(a,each=1000)
vv<-sd(aa)
vv
vv<-var(aa)
vv
sum(a*a)
sum(a*a)/(3)
sqrt(1/4)
1.328*.5
b<-c(-1,1)
bb<-rep(b,each=1000)
var(bb)
b<-c(-.5,.5)
bb<-rep(b,each=1000)
var(bb)
sd(bb)
library(gamlj)
library(gamlj)
library(gamlj)
mark(pdata)
library(gamlj)
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
options(digits = 3)
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
options(digits = 2)
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
library(gamlj)
mark(pdata)
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
library(gamlj)
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
library(gamlj)
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
library(gamlj)
installme("gamlj")
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
library(gamlj)
mod<-gamljGlm(formula=Sepal.Length~Sepal.Width*Petal.Length*Petal.Width,
data=iris,
plotHAxis = "Sepal.Width"
)
mod
plot(mod,formula = ~Sepal.Width:Petal.Length, simpleScale="percent")
install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
install.packages('jmvcore')
devtools::install_github('jamovi/jmvcore')
#devtools::install_github("gamlj/gamlj")
source("local/functions.R")
library(jmvcore)
#home<-"C:\\Program Files/jamovi 2.2.5.0/"
jmvtools::version()
jmvtools::check()
home<-"flatpak"
jmvtools::check(home=home)
installme("gamlj")
installme("gamlj")
installme("gamlj")
library(gamlj)
installme("gamlj")
library(gamlj)
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
installme("gamlj")
#install.packages('jmvcore')
version
jmv::descriptives(
data = data,
vars = vars(exer, endu, sptype))
library(gamlj)
